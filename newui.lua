-- PHUCMAX UI (Fixed + Toggle + Slider + Dropdown + Input Speed)local TweenService = game:GetService("TweenService")local UserInputService = game:GetService("UserInputService")local RunService = game:GetService("RunService")local Players = game:GetService("Players")local Stats = game:GetService("Stats")local LocalPlayer = Players.LocalPlayer-- === FPS label (top) ===local ScreenGui = Instance.new("ScreenGui")ScreenGui.Name = "PHUCMAX_UI"ScreenGui.ResetOnSpawn = falseScreenGui.Parent = game.CoreGuilocal Frame = Instance.new("Frame", ScreenGui)Frame.BackgroundTransparency = 1Frame.AnchorPoint = Vector2.new(0.5, 0)Frame.Position = UDim2.new(0.5, 0, 0, 0)Frame.Size = UDim2.new(0, 400, 0, 40)local Label = Instance.new("TextLabel", Frame)Label.Size = UDim2.new(1,0,1,0)Label.BackgroundTransparency = 1Label.Font = Enum.Font.SourceSansBoldLabel.TextSize = 30Label.RichText = trueLabel.TextStrokeTransparency = 0Label.TextStrokeColor3 = Color3.fromRGB(255,255,255)Label.Text = "PHUCMAX | FPS: 0 | Ping: 0ms"local UIGradient = Instance.new("UIGradient", Label)UIGradient.Color = ColorSequence.new{    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),    ColorSequenceKeypoint.new(0.16, Color3.fromRGB(255, 127, 0)),    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(255, 255, 0)),    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 0)),    ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)),    ColorSequenceKeypoint.new(0.83, Color3.fromRGB(75, 0, 130)),    ColorSequenceKeypoint.new(1, Color3.fromRGB(148, 0, 211))}UIGradient.Rotation = 0task.spawn(function()    while task.wait(0.05) do        UIGradient.Rotation = (UIGradient.Rotation + 5) % 360    endend)-- FPS & Ping updatelocal fps, lastUpdate, frames = 0, tick(), 0RunService.RenderStepped:Connect(function()    frames = frames + 1    local now = tick()    if now - lastUpdate >= 1 then        fps = frames        frames = 0        lastUpdate = now        local ping = 0        pcall(function()            ping = math.floor(Stats.Network.ServerStatsItem["Data Ping"]:GetValue())        end)        Label.Text = string.format("PHUCMAX | FPS: %d | Ping: %dms", fps, ping)    endend)-- Clear oldif game.CoreGui:FindFirstChild("PHUCMAX_MAINUI") then game.CoreGui.PHUCMAX_MAINUI:Destroy() endif game.CoreGui:FindFirstChild("PHUCMAX_TOGGLE") then game.CoreGui.PHUCMAX_TOGGLE:Destroy() end-- === Toggle button (draggable) ===local toggleGui = Instance.new("ScreenGui", game.CoreGui)toggleGui.Name = "PHUCMAX_TOGGLE"toggleGui.ResetOnSpawn = falselocal toggleBtn = Instance.new("ImageButton", toggleGui)toggleBtn.Name = "ToggleButton"toggleBtn.Size = UDim2.new(0,45,0,45)toggleBtn.Position = UDim2.new(0,20,0.5,-22)toggleBtn.AnchorPoint = Vector2.new(0,0.5)toggleBtn.Image = "rbxassetid://70869581156112"toggleBtn.BackgroundTransparency = 0.6toggleBtn.BorderSizePixel = 0Instance.new("UICorner", toggleBtn).CornerRadius = UDim.new(0,12)local uiStroke = Instance.new("UIStroke", toggleBtn)uiStroke.Thickness = 2uiStroke.Color = Color3.fromRGB(135,206,250)-- draggable toggle (separate vars)do    local draggingToggle, dragInputToggle, dragStartToggle, startPosToggle    local function updateToggle(input)        local delta = input.Position - dragStartToggle        toggleBtn.Position = UDim2.new(startPosToggle.X.Scale, startPosToggle.X.Offset + delta.X,                                        startPosToggle.Y.Scale, startPosToggle.Y.Offset + delta.Y)    end    toggleBtn.InputBegan:Connect(function(input)        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then            draggingToggle = true            dragStartToggle = input.Position            startPosToggle = toggleBtn.Position            input.Changed:Connect(function()                if input.UserInputState == Enum.UserInputState.End then draggingToggle = false end            end)        end    end)    toggleBtn.InputChanged:Connect(function(input)        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then            dragInputToggle = input        end    end)    UserInputService.InputChanged:Connect(function(input)        if input == dragInputToggle and draggingToggle then updateToggle(input) end    end)end-- === MAIN UI ===local mainGui = Instance.new("ScreenGui", game.CoreGui)mainGui.Name = "PHUCMAX_MAINUI"mainGui.ResetOnSpawn = falsemainGui.Enabled = true -- show by defaultlocal mainFrame = Instance.new("ImageLabel", mainGui)mainFrame.Name = "MainFrame"mainFrame.Size = UDim2.new(0,400,0,250)mainFrame.Position = UDim2.new(0.5,0,0.5,0)mainFrame.AnchorPoint = Vector2.new(0.5,0.5)mainFrame.Image = "rbxassetid://86753621306939"mainFrame.BackgroundTransparency = 1mainFrame.ScaleType = Enum.ScaleType.CropmainFrame.ClipsDescendants = trueInstance.new("UICorner", mainFrame).CornerRadius = UDim.new(0,20)local mainStroke = Instance.new("UIStroke", mainFrame)mainStroke.Thickness = 3mainStroke.Color = Color3.fromRGB(180,220,255)-- draggable mainFrame (separate vars)do    local draggingMain, dragInputMain, dragStartMain, startPosMain    local function updateMain(input)        local delta = input.Position - dragStartMain        mainFrame.Position = UDim2.new(startPosMain.X.Scale, startPosMain.X.Offset + delta.X,                                        startPosMain.Y.Scale, startPosMain.Y.Offset + delta.Y)    end    mainFrame.InputBegan:Connect(function(input)        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then            draggingMain = true            dragStartMain = input.Position            startPosMain = mainFrame.Position            input.Changed:Connect(function()                if input.UserInputState == Enum.UserInputState.End then draggingMain = false end            end)        end    end)    mainFrame.InputChanged:Connect(function(input)        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then            dragInputMain = input        end    end)    UserInputService.InputChanged:Connect(function(input)        if input == dragInputMain and draggingMain then updateMain(input) end    end)end-- === Tab area & Content area (same layout as original) ===local tabFrame = Instance.new("ScrollingFrame", mainFrame)tabFrame.Name = "TabFrame"tabFrame.Size = UDim2.new(1, -20, 0, 40)tabFrame.Position = UDim2.new(0,10,0,10)tabFrame.BackgroundTransparency = 1tabFrame.ScrollBarThickness = 6tabFrame.ClipsDescendants = truetabFrame.AutomaticCanvasSize = Enum.AutomaticSize.XtabFrame.ScrollingDirection = Enum.ScrollingDirection.Xlocal tabList = Instance.new("UIListLayout", tabFrame)tabList.FillDirection = Enum.FillDirection.HorizontaltabList.SortOrder = Enum.SortOrder.LayoutOrdertabList.Padding = UDim.new(0,10)local contentFrame = Instance.new("ScrollingFrame", mainFrame)contentFrame.Name = "ContentFrame"contentFrame.Size = UDim2.new(1, -20, 1, -70)contentFrame.Position = UDim2.new(0,10,0,50)contentFrame.BackgroundTransparency = 1contentFrame.ScrollBarThickness = 8contentFrame.ClipsDescendants = truecontentFrame.AutomaticCanvasSize = Enum.AutomaticSize.YcontentFrame.ScrollingDirection = Enum.ScrollingDirection.Ylocal contentList = Instance.new("UIListLayout", contentFrame)contentList.SortOrder = Enum.SortOrder.LayoutOrdercontentList.Padding = UDim.new(0,10)contentList.HorizontalAlignment = Enum.HorizontalAlignment.Center-- notify (attach to mainGui)local function notify(msg)    local note = Instance.new("TextLabel", mainGui)    note.Size = UDim2.new(0,250,0,40)    note.Position = UDim2.new(1,-260,1,-60)    note.BackgroundColor3 = Color3.fromRGB(6,50,120)    note.BackgroundTransparency = 0.06    note.Text = msg    note.Font = Enum.Font.GothamBold    note.TextSize = 15    note.TextColor3 = Color3.fromRGB(255,255,255)    Instance.new("UICorner", note).CornerRadius = UDim.new(0,8)    Instance.new("UIStroke", note).Color = Color3.fromRGB(135,206,250)    task.delay(3, function() if note and note.Parent then note:Destroy() end end)end-- Tab & helperslocal tabs = {}local currentTab = nillocal function createTab(name)    local tabBtn = Instance.new("TextButton", tabFrame)    tabBtn.Size = UDim2.new(0,120,1,0)    tabBtn.Text = name    tabBtn.Font = Enum.Font.GothamBold    tabBtn.TextSize = 16    tabBtn.TextColor3 = Color3.fromRGB(0,0,0)    tabBtn.BackgroundColor3 = Color3.fromRGB(255,255,255)    tabBtn.BackgroundTransparency = 0.35    tabBtn.AutoButtonColor = false    Instance.new("UICorner", tabBtn).CornerRadius = UDim.new(0,8)    local stroke = Instance.new("UIStroke", tabBtn)    stroke.Color = Color3.fromRGB(180,220,255)    stroke.Thickness = 1    stroke.Transparency = 0.3    local thisContent = Instance.new("ScrollingFrame", contentFrame) -- parent v√†o contentFrame    thisContent.Name = name .. "_Content"    thisContent.Size = UDim2.new(1, 0, 1, 0)    thisContent.Position = UDim2.new(0, 0, 0, 0)    thisContent.BackgroundTransparency = 1    thisContent.Visible = false    thisContent.AutomaticCanvasSize = Enum.AutomaticSize.Y    thisContent.ScrollBarThickness = 8    thisContent.ScrollingDirection = Enum.ScrollingDirection.Y    thisContent.ClipsDescendants = true    local list = Instance.new("UIListLayout", thisContent)    list.SortOrder = Enum.SortOrder.LayoutOrder    list.Padding = UDim.new(0,10)    list.HorizontalAlignment = Enum.HorizontalAlignment.Center    tabs[name] = { btn = tabBtn, frame = thisContent }    tabBtn.MouseButton1Click:Connect(function()        for _, data in pairs(tabs) do            if data.frame then data.frame.Visible = false end            if data.btn then data.btn.BackgroundTransparency = 0.35 end        end        thisContent.Visible = true        tabBtn.BackgroundTransparency = 0        currentTab = name        local t1 = TweenService:Create(tabBtn, TweenInfo.new(0.08), {Size = UDim2.new(0,115,1,0)})        local t2 = TweenService:Create(tabBtn, TweenInfo.new(0.1), {Size = UDim2.new(0,120,1,0)})        t1:Play()        t1.Completed:Connect(function() t2:Play() end)    end)    return thisContentendlocal function createButton(parent, text, callback)    local btn = Instance.new("TextButton", parent)    btn.Size = UDim2.new(1, 0, 0, 40)    btn.Text = text    btn.Font = Enum.Font.Gotham    btn.TextSize = 16    btn.TextColor3 = Color3.fromRGB(0,0,0)    btn.BackgroundColor3 = Color3.fromRGB(255,255,255)    btn.BackgroundTransparency = 0.35    btn.AutoButtonColor = false    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)    local stroke = Instance.new("UIStroke", btn)    stroke.Color = Color3.fromRGB(135,206,250)    stroke.Thickness = 1    btn.MouseButton1Click:Connect(function()        local t1 = TweenService:Create(btn, TweenInfo.new(0.08), {Size = UDim2.new(1,0,0,35)})        local t2 = TweenService:Create(btn, TweenInfo.new(0.1), {Size = UDim2.new(1,0,0,40)})        t1:Play()        t1.Completed:Connect(function() t2:Play() end)        if callback then callback() end    end)    return btnendlocal function createToggle(parent, text, default, callback)    local frame = Instance.new("TextButton", parent)    frame.Size = UDim2.new(1,0,0,40)    frame.BackgroundColor3 = Color3.fromRGB(255,255,255)    frame.BackgroundTransparency = 0.35    frame.AutoButtonColor = false    frame.Text = ""    Instance.new("UICorner", frame).CornerRadius = UDim.new(0,8)    Instance.new("UIStroke", frame).Color = Color3.fromRGB(135,206,250)    local label = Instance.new("TextLabel", frame)    label.Size = UDim2.new(1,-80,1,0)    label.Position = UDim2.new(0,12,0,0)    label.BackgroundTransparency = 1    label.Font = Enum.Font.GothamBold    label.Text = text    label.TextSize = 16    label.TextColor3 = Color3.fromRGB(0,0,0)    label.TextXAlignment = Enum.TextXAlignment.Left    local stateBox = Instance.new("TextLabel", frame)    stateBox.Size = UDim2.new(0,60,0,26)    stateBox.Position = UDim2.new(1,-70,0.5,-13)    stateBox.BackgroundColor3 = default and Color3.fromRGB(40,200,40) or Color3.fromRGB(200,40,40)    stateBox.Text = default and "ON" or "OFF"    stateBox.Font = Enum.Font.GothamBold    stateBox.TextSize = 14    stateBox.TextColor3 = Color3.fromRGB(255,255,255)    Instance.new("UICorner", stateBox).CornerRadius = UDim.new(0,6)    local state = default    frame.MouseButton1Click:Connect(function()        state = not state        stateBox.Text = state and "ON" or "OFF"        stateBox.BackgroundColor3 = state and Color3.fromRGB(40,200,40) or Color3.fromRGB(200,40,40)        if callback then callback(state) end    end)    return frameendlocal function createSlider(parent, text, min, max, default, callback)    local frame = Instance.new("Frame", parent)    frame.Size = UDim2.new(1,0,0,54)    frame.BackgroundTransparency = 1    local label = Instance.new("TextLabel", frame)    label.Size = UDim2.new(1,0,0,22)    label.Position = UDim2.new(0,0,0,0)    label.BackgroundTransparency = 1    label.Text = text.." ["..default.."]"    label.Font = Enum.Font.GothamBold    label.TextSize = 16    label.TextColor3 = Color3.fromRGB(0,0,0)    label.TextXAlignment = Enum.TextXAlignment.Left    local sliderBack = Instance.new("Frame", frame)    sliderBack.Size = UDim2.new(1,-16,0,13)    sliderBack.Position = UDim2.new(0,8,0,30)    sliderBack.BackgroundColor3 = Color3.fromRGB(200,220,250)    sliderBack.BackgroundTransparency = 0.25    Instance.new("UICorner", sliderBack).CornerRadius = UDim.new(0,6)    local sliderBar = Instance.new("Frame", sliderBack)    sliderBar.Size = UDim2.new((default-min)/(max-min),0,1,0)    sliderBar.BackgroundColor3 = Color3.fromRGB(40,140,255)    sliderBar.BackgroundTransparency = 0.07    Instance.new("UICorner", sliderBar).CornerRadius = UDim.new(0,6)    local draggingS = false    local function setVal(val)        sliderBar.Size = UDim2.new((val-min)/(max-min),0,1,0)        label.Text = text.." ["..val.."]"        if callback then callback(val) end    end    sliderBack.InputBegan:Connect(function(inp)        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then            draggingS = true            local px = math.clamp((inp.Position.X - sliderBack.AbsolutePosition.X)/sliderBack.AbsoluteSize.X, 0, 1)            setVal(math.floor((min + (max-min)*px)+0.5))        end    end)    sliderBack.InputEnded:Connect(function(inp)        if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then draggingS = false end    end)    sliderBack.InputChanged:Connect(function(inp)        if (inp.UserInputType == Enum.UserInputType.MouseMovement or inp.UserInputType == Enum.UserInputType.Touch) and draggingS then            local px = math.clamp((inp.Position.X - sliderBack.AbsolutePosition.X)/sliderBack.AbsoluteSize.X, 0, 1)            setVal(math.floor((min + (max-min)*px)+0.5))        end    end)    return frameend-- PHUCMAX UI Frameworklocal Players = game:GetService("Players")local TweenService = game:GetService("TweenService")local LocalPlayer = Players.LocalPlayerlocal PHUCMAX_UI = {}local tabs = {}local currentTab = nil-- GUI ch√≠nhlocal mainGui = Instance.new("ScreenGui", game.CoreGui)mainGui.Name = "PHUCMAX_UI"mainGui.ResetOnSpawn = falselocal mainFrame = Instance.new("Frame", mainGui)mainFrame.Name = "MainFrame"mainFrame.Size = UDim2.new(0,500,0,350)mainFrame.Position = UDim2.new(0.5,-250,0.5,-175)mainFrame.BackgroundColor3 = Color3.fromRGB(35,35,50)mainFrame.Active = truemainFrame.Draggable = trueInstance.new("UICorner", mainFrame).CornerRadius = UDim.new(0,12)local stroke = Instance.new("UIStroke", mainFrame)stroke.Color = Color3.fromRGB(120,120,200)stroke.Thickness = 2-- Headerlocal header = Instance.new("TextLabel", mainFrame)header.Size = UDim2.new(1,0,0,40)header.BackgroundColor3 = Color3.fromRGB(50,50,80)header.Text = "PHUCMAX Hub - by PhucMax"header.Font = Enum.Font.GothamBoldheader.TextSize = 18header.TextColor3 = Color3.fromRGB(255,255,255)Instance.new("UICorner", header).CornerRadius = UDim.new(0,12)-- Tab arealocal tabFrame = Instance.new("ScrollingFrame", mainFrame)tabFrame.Name = "TabFrame"tabFrame.Size = UDim2.new(1,-20,0,40)tabFrame.Position = UDim2.new(0,10,0,50)tabFrame.BackgroundTransparency = 1tabFrame.ScrollBarThickness = 6tabFrame.AutomaticCanvasSize = Enum.AutomaticSize.XtabFrame.ScrollingDirection = Enum.ScrollingDirection.Xlocal tabList = Instance.new("UIListLayout", tabFrame)tabList.FillDirection = Enum.FillDirection.HorizontaltabList.SortOrder = Enum.SortOrder.LayoutOrdertabList.Padding = UDim.new(0,10)-- Notify systemfunction PHUCMAX_UI.Notify(msg)    local note = Instance.new("TextLabel", mainGui)    note.Size = UDim2.new(0,250,0,40)    note.Position = UDim2.new(1,-260,1,-60)    note.BackgroundColor3 = Color3.fromRGB(0,50,150)    note.BackgroundTransparency = 0.2    note.Text = msg    note.Font = Enum.Font.GothamBold    note.TextSize = 16    note.TextColor3 = Color3.fromRGB(255,255,255)    Instance.new("UICorner", note).CornerRadius = UDim.new(0,8)    Instance.new("UIStroke", note).Color = Color3.fromRGB(135,206,250)    task.delay(3,function() note:Destroy() end)end-- T·∫°o Tabfunction PHUCMAX_UI.CreateTab(name)    local tabBtn = Instance.new("TextButton", tabFrame)    tabBtn.Size = UDim2.new(0,120,1,0)    tabBtn.Text = name    tabBtn.Font = Enum.Font.GothamBold    tabBtn.TextSize = 16    tabBtn.TextColor3 = Color3.fromRGB(0,0,0)    tabBtn.BackgroundColor3 = Color3.fromRGB(255,255,255)    tabBtn.BackgroundTransparency = 0.35    Instance.new("UICorner", tabBtn).CornerRadius = UDim.new(0,8)    local stroke = Instance.new("UIStroke", tabBtn)    stroke.Color = Color3.fromRGB(180,220,255)    local content = Instance.new("ScrollingFrame", mainFrame)    content.Name = name.."_Content"    content.Size = UDim2.new(1,-20,1,-100)    content.Position = UDim2.new(0,10,0,100)    content.BackgroundTransparency = 1    content.ScrollBarThickness = 6    content.AutomaticCanvasSize = Enum.AutomaticSize.Y    content.Visible = false    local list = Instance.new("UIListLayout", content)    list.Padding = UDim.new(0,10)    list.HorizontalAlignment = Enum.HorizontalAlignment.Center    tabs[name] = {btn = tabBtn, frame = content}    tabBtn.MouseButton1Click:Connect(function()        for n,data in pairs(tabs) do            data.frame.Visible = false            data.btn.BackgroundTransparency = 0.35        end        content.Visible = true        tabBtn.BackgroundTransparency = 0        currentTab = name    end)    if not currentTab then        currentTab = name        content.Visible = true        tabBtn.BackgroundTransparency = 0    end    return contentend-- T·∫°o Buttonfunction PHUCMAX_UI.CreateButton(tab, text, callback)    local btn = Instance.new("TextButton", tab)    btn.Size = UDim2.new(0,200,0,40)    btn.BackgroundColor3 = Color3.fromRGB(70,70,90)    btn.TextColor3 = Color3.new(1,1,1)    btn.Text = text    btn.Font = Enum.Font.GothamBold    btn.TextSize = 14    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)    btn.MouseButton1Click:Connect(function()        if callback then callback() end    end)    return btnend-- H√†m t·∫°o Toggle Buttonfunction createToggle(parent, name, callback)    local btn = Instance.new("TextButton", parent)    btn.Size = UDim2.new(0,150,0,40)    btn.BackgroundColor3 = Color3.fromRGB(90,90,120)    btn.TextColor3 = Color3.new(1,1,1)    btn.Font = Enum.Font.GothamBold    btn.TextSize = 14    btn.Text = name .. ": OFF"    local enabled = false    btn.MouseButton1Click:Connect(function()        enabled = not enabled        if enabled then            btn.Text = name .. ": ON"            btn.BackgroundColor3 = Color3.fromRGB(0,150,0)        else            btn.Text = name .. ": OFF"            btn.BackgroundColor3 = Color3.fromRGB(150,0,0)        end        if callback then            callback(enabled)        end    end)    return btnend------------------------------------------------------------------ H√†m t·∫°o Sliderfunction createSlider(parent, name, min, max, default, callback)    local frame = Instance.new("Frame", parent)    frame.Size = UDim2.new(0,200,0,50)    frame.BackgroundColor3 = Color3.fromRGB(50,50,70)    frame.BorderSizePixel = 0    local bar = Instance.new("Frame", frame)    bar.Size = UDim2.new(1, -20, 0, 10)    bar.Position = UDim2.new(0,10,0.5,-5)    bar.BackgroundColor3 = Color3.fromRGB(100,100,120)    local btn = Instance.new("TextButton", bar)    btn.Size = UDim2.new(0,10,1,0)    btn.Position = UDim2.new(0,0,0,0)    btn.BackgroundColor3 = Color3.fromRGB(200,200,200)    btn.Text = ""    local label = Instance.new("TextLabel", frame)    label.Size = UDim2.new(1,0,0,20)    label.Position = UDim2.new(0,0,0,-20)    label.BackgroundTransparency = 1    label.TextColor3 = Color3.new(1,1,1)    label.Font = Enum.Font.GothamBold    label.TextSize = 14    label.Text = name..": "..default    local uis = game:GetService("UserInputService")    local dragging = false    local value = default    btn.MouseButton1Down:Connect(function()        dragging = true    end)    uis.InputEnded:Connect(function(input)        if input.UserInputType == Enum.UserInputType.MouseButton1 then            dragging = false        end    end)    uis.InputChanged:Connect(function(input)        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then            local barAbs = bar.AbsoluteSize.X            local barPos = bar.AbsolutePosition.X            local pos = math.clamp((input.Position.X - barPos)/barAbs, 0, 1)            btn.Position = UDim2.new(pos, -5, 0, 0)            value = math.floor(min + pos*(max-min))            label.Text = name..": "..value            if callback then                callback(value)            end        end    end)    return frameendreturn PHUCMAX_UIlocal myTab = PHUCMAX_UI.CreateTab("Test Tab")-- T·∫°o 1 button ch·∫°y scriptPHUCMAX_UI.CreateButton(myTab, "Ch·∫°y Script", function()    loadstring(game:HttpGet("link_script_c·ªßa_anh"))()end)-- T·∫°o toggle b·∫≠t/t·∫ØtcreateToggle(myTab, "Auto Farm", function(state)    if state then        print("Auto Farm: ON")    else        print("Auto Farm: OFF")    endend)-- T·∫°o slider ch·ªânh speedcreateSlider(myTab, "WalkSpeed", 16, 100, 16, function(value)    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = valueend)